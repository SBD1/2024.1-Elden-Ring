CREATE TYPE funcao_p AS ENUM ('Inimigo', 'Ferreiro', 'Chefe', 'Mercador', 'Campones');

CREATE TYPE tipo_atk AS ENUM ('Fogo', 'Raio', 'Magia', 'Cortante', 'Contusao');

CREATE TYPE tipo_p AS ENUM ('Jogavel', 'Njogavel');

CREATE TABLE IF NOT EXISTS personagem (
    id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
    nome VARCHAR(25) NOT NULL,
    hp INTEGER NOT NULL,
    tipo tipo_p NOT NULL,
    PRIMARY KEY (id_personagem),
    CONSTRAINT chk_hp CHECK (hp >= 1)
);

CREATE TABLE IF NOT EXISTS npc (
    id_npc INTEGER PRIMARY KEY REFERENCES personagem(id_personagem),
    nome VARCHAR(25) NOT NULL,
    hp INTEGER NOT NULL,
    funcao funcao_p NOT NULL,
    esta_hostil BOOLEAN NOT NULL,
    resistencia INTEGER NOT NULL,
    fraquezas tipo_atk,
    drop_runas INTEGER NOT NULL,
    CONSTRAINT chk_hp_npc CHECK (hp >= 1),
    CONSTRAINT chk_drop_runas CHECK (drop_runas >= 0)
);

CREATE TABLE IF NOT EXISTS inimigo(
    id_inimigo INTEGER PRIMARY KEY REFERENCES personagem(id_personagem),
    esta_hostil BOOLEAN NOT NULL,
    resistencia INTEGER NOT NULL,
    fraquezas tipo_atk NOT NULL,
    drop_runas INTEGER NOT NULL,
    dano_base INTEGER NOT NULL,
    nome VARCHAR(25) NOT NULL,
    hp INTEGER NOT NULL,
    CONSTRAINT chk_hp_inimigo CHECK (hp >= 0),
    CONSTRAINT chk_drop_runas_inimigo CHECK (drop_runas >= 0),
    CONSTRAINT chk_dano_base CHECK (dano_base >= 0)
);

CREATE TABLE IF NOT EXISTS chefe(
    id_chefe INTEGER PRIMARY KEY REFERENCES personagem(id_personagem),
    nome VARCHAR(25) NOT NULL,
    hp INTEGER NOT NULL,
    esta_hostil BOOLEAN NOT NULL,
    resistencia INTEGER NOT NULL,
    fraquezas tipo_atk NOT NULL,
    drop_runas INTEGER NOT NULL,
    dano_base INTEGER NOT NULL,
    lembranca VARCHAR(25) NOT NULL,
    desperate_move INTEGER NOT NULL,
    CONSTRAINT chk_hp_chefe CHECK (hp >= 0),
    CONSTRAINT chk_drop_runas_chefe CHECK (drop_runas >= 0),
    CONSTRAINT chk_dano_base_chefe CHECK (dano_base >= 0)
);

CREATE TABLE IF NOT EXISTS regiao(
    id_regiao INTEGER PRIMARY KEY,
    nome VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS area(
    id_area INTEGER PRIMARY KEY,
    nome VARCHAR(10) UNIQUE NOT NULL,
    id_regiao INTEGER REFERENCES regiao(id_regiao)
);

CREATE TABLE IF NOT EXISTS ferreiro(
    id_ferreiro INTEGER PRIMARY KEY REFERENCES personagem(id_personagem),
    nome VARCHAR(25) NOT NULL,
    hp INTEGER NOT NULL,
    esta_hostil BOOLEAN NOT NULL,
    resistencia INTEGER NOT NULL,
    drop_runas INTEGER NOT NULL,
    CONSTRAINT chk_hp_ferreiro CHECK (hp >= 1),
    CONSTRAINT chk_drop_runas_ferreiro CHECK (drop_runas >= 0)
);

CREATE TABLE IF NOT EXISTS area_de_morte(
    id_area_de_morte INTEGER PRIMARY KEY,
    id_jogador INTEGER REFERENCES personagem(id_personagem),
    id_area INTEGER REFERENCES area(id_area),
    runas_dropadas INTEGER NOT NULL,
    CONSTRAINT chk_runas_dropadas CHECK (runas_dropadas >= 0)
);

CREATE TABLE IF NOT EXISTS classe(
    nome VARCHAR(14) PRIMARY KEY,
    base_vit INTEGER NOT NULL,
    base_vig INTEGER NOT NULL,
    base_int INTEGER NOT NULL,
    base_fe INTEGER NOT NULL,
    base_dex INTEGER NOT NULL,
    base_str INTEGER NOT NULL,
    CONSTRAINT chk_base_vit CHECK (base_vit >= 0),
    CONSTRAINT chk_base_vig CHECK (base_vig >= 0),
    CONSTRAINT chk_base_int CHECK (base_int >= 0),
    CONSTRAINT chk_base_fe CHECK (base_fe >= 0),
    CONSTRAINT chk_base_dex CHECK (base_dex >= 0),
    CONSTRAINT chk_base_str CHECK (base_str >= 0)
);

CREATE TABLE IF NOT EXISTS nivel(
    id_nivel INTEGER PRIMARY KEY,
    nro_nivel INTEGER NOT NULL,
    runas INTEGER NOT NULL,
    CONSTRAINT chk_nro_nivel CHECK (nro_nivel >= 0),
    CONSTRAINT chk_runas CHECK (runas >= 0)
);

CREATE TABLE IF NOT EXISTS jogador(
    id_jogador INTEGER PRIMARY KEY,
    id_nivel INTEGER REFERENCES nivel(id_nivel),
    id_classe VARCHAR(14) REFERENCES classe(nome),
    id_area INTEGER REFERENCES area(id_area),
    vigor INTEGER NOT NULL,
    vitalidade INTEGER NOT NULL,
    intel INTEGER NOT NULL,
    fe INTEGER NOT NULL,
    destreza INTEGER NOT NULL,
    forca INTEGER NOT NULL,
    peso_max INTEGER NOT NULL,
    stamina INTEGER NOT NULL,
    mp INTEGER NOT NULL,
    nivel_atual INTEGER NOT NULL,
    CONSTRAINT chk_nivel_atual CHECK (nivel_atual >= 1),
    CONSTRAINT chk_vigor CHECK (vigor >= 1),
    CONSTRAINT chk_vitalidade CHECK (vitalidade >= 1),
    CONSTRAINT chk_intel CHECK (intel >= 1),
    CONSTRAINT chk_fe CHECK (fe >= 1),
    CONSTRAINT chk_destreza CHECK (destreza >= 1),
    CONSTRAINT chk_forca CHECK (forca >= 1),
    CONSTRAINT chk_peso_max CHECK (peso_max >= 1),
    CONSTRAINT chk_mp CHECK (mp >= 1),
    CONSTRAINT chk_stamina CHECK (stamina >= 1)
);

CREATE TABLE IF NOT EXISTS conecta_area(
    id_origem INTEGER REFERENCES area(id_area),
    id_destino INTEGER REFERENCES area(id_area),
    PRIMARY KEY (id_origem, id_destino)
);

CREATE TABLE IF NOT EXISTS realiza(
    id_golpes INTEGER PRIMARY KEY,
    id_npc INTEGER REFERENCES npc(id_npc),
    multiplicador INTEGER NOT NULL,
    dano_final INTEGER NOT NULL,
    CONSTRAINT chk_multiplicador CHECK (multiplicador >= 1),
    CONSTRAINT chk_dano_final CHECK (dano_final >= 1)
);

-- PARTE DOS ITENS E INVENTÁRIO
CREATE TABLE IF NOT EXISTS item(
    id_item INTEGER PRIMARY KEY,
    eh_chave BOOLEAN NOT NULL,
    raridade INTEGER NOT NULL,
    nome VARCHAR(25) NOT NULL,
    valor INTEGER,
    tipo INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS inventario(
    id_usuario INTEGER PRIMARY KEY REFERENCES personagem(id_personagem),
    seccoes VARCHAR(15) NOT NULL
);

CREATE TABLE IF NOT EXISTS instancia_de_item(
    id_instancia INTEGER PRIMARY KEY,
    id_item INTEGER REFERENCES item(id_item),
    id_area INTEGER REFERENCES area(id_area),
    id_inventario INTEGER REFERENCES inventario(id_usuario)
);

CREATE TABLE IF NOT EXISTS item_inventario(
    id_inventario INTEGER REFERENCES personagem(id_personagem),
    id_instancia_item INTEGER REFERENCES item(id_item),
    quantidade INTEGER NOT NULL,
    PRIMARY KEY(id_inventario, id_instancia_item)
);

-- PARTE DO EQUIPAMENTO
CREATE TABLE IF NOT EXISTS equipamento(
    id_equipamento INTEGER PRIMARY KEY REFERENCES item(id_item),
    tipo VARCHAR(15) NOT NULL,
    requisitos INTEGER,
    melhoria INTEGER NOT NULL,
    peso INTEGER NOT NULL,
    custo_melhoria INTEGER NOT NULL,
    CONSTRAINT chk_melhoria CHECK (melhoria >= 0),
    CONSTRAINT chk_peso CHECK (peso >= 0),
    CONSTRAINT chk_custo_melhoria CHECK (custo_melhoria >= 1)
);

CREATE TABLE IF NOT EXISTS escudo (
    id_escudo INTEGER PRIMARY KEY REFERENCES equipamento(id_equipamento),
    defesa INTEGER
);

CREATE TABLE IF NOT EXISTS armadura (
    id_armadura INTEGER PRIMARY KEY REFERENCES equipamento(id_equipamento),
    resistencia INTEGER
);

CREATE TABLE IF NOT EXISTS arma (
    id_arma INTEGER PRIMARY KEY REFERENCES equipamento(id_equipamento),
    --    habilidade VARCHAR(255), ARRUMAR TIPO DEPOIS
    dano INTEGER
);

CREATE TABLE IF NOT EXISTS arma_pesada (
    id_arma_pesada INTEGER PRIMARY KEY REFERENCES arma(id_arma),
    forca INTEGER
);

CREATE TABLE IF NOT EXISTS arma_leve (
    id_arma_leve INTEGER PRIMARY KEY REFERENCES arma(id_arma),
    destreza INTEGER
);

CREATE TABLE IF NOT EXISTS cajado (
    id_cajado INTEGER PRIMARY KEY REFERENCES arma(id_arma),
    proficiencia VARCHAR(1)
);

CREATE TABLE IF NOT EXISTS selo (
    id_selo INTEGER PRIMARY KEY REFERENCES arma(id_arma),
    dano INTEGER,
    --    habilidade VARCHAR(255), ARRUMAR TIPO DEPOIS
    milagre INTEGER
);

CREATE TABLE IF NOT EXISTS engaste (
    id_engaste SERIAL PRIMARY KEY,
    id_arma INTEGER REFERENCES arma(id_arma),
    atributo_extra INTEGER
);
